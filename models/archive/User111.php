<?php
namespace app\models;
use Yii;
use yii\web\IdentityInterface;
use yii\behaviors\TimestampBehavior;
/**
 * This is the model class for table "user".
 *
 * @property string $id
 * @property string $username
 * @property string $email
 * @property string $password_hash
 * @property integer $status
 * @property string $auth_key
 * @property string $created_at
 * @property string $updated_at
 */

class User extends \yii\db\ActiveRecord implements IdentityInterface
{
    const STATUS_DELETED = 0; // Բլոկավորված օգտատեր
    const STATUS_NOT_ACTIVE = 1; // Դեռ չակտիվացված օգտատեր, հետագայում՝ email-ով կակտիվացնենք:
    const STATUS_ACTIVE = 10; // ակտիվացված օգտատերերի ստատուսն է:    
    public $password_hash; // որի արժեքը կստանանք Logblog և Regblog մոդելներից:

    public static function tableName()
    {
        return 'user';
    }

    public function rules()
    {
        return [
            [['username',  'email', 'password_hash'], 'filter','filter' =>'trim', 'skipOnEmpty' =>'true'], // ոչ պռոբել, ոչ դատարկ
            [['username',  'email', 'status'], 'required'], // պարտադիր            
            ['email',      'email'],
            ['username',   'string', 'min' => 2 ,'max' => 200],
            [['password_hash'], 'required', 'on' => 'create'], // պարտադիր լրացնել <ստեղծման> սցենարի ժամանակ
            [['username'], 'unique', 'message' => 'This name is reserved.' ], // չկրկնվող
            [['email'],    'unique', 'message' => 'This email address is reserved.'] , // չկրկնվող
        ];
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => 'Username',
            'email' => 'Email',
            //'password_hash' => 'Password Hash',
            'password_hash' => 'Password Hash',
            'status' => 'Status',
            'auth_key' => 'Auth Key',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }
    
    /* behaviors*/
    public function behaviors() {
        parent::behaviors();
        [
        TimestampBehavior::className()
        ];
    }

    /* search user by name*/
    public function findByUsername($username) {
        return static::findOne([
            'username' => $username
        ]);
    }

    /* helpers */
    // Regblog
    public function setPassword($password) {
        $this->password_hash = \Yii::$app->security->generatePasswordHash($password_hash);
    }

    // Regblog
    public function generateAuthKey() {  
        $this->auth_key = \Yii::$app->security->generateRandomString();
    }
    // Login
    public function validatePassword($password_hash) {
        return \Yii::$app->security->validatePassword($password_hash, $this->password_hash);
    }

    /* user's authentication */
    public static function findIdentity($id)
    {
        // բացի id-ից, նաև նրա ստատուսը
        return static::findOne(['id' => $id, 'status' =>self::STATUS_ACTIVE]);
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        return static::findOne(['access_token' => $token]);
    }

    public function getId()
    {
        return $this->id;
    }

    public function getAuthKey()
    {
        // բազայում գծիկով, ու փոքրատառերով
        return $this->auth_key;
    }

    public function validateAuthKey($authKey)
    {
        // ներմուծված կին համեմատի բազայի auth_key -ի հետ
        return $this->auth_key === $authKey;
    }
}


/*
 * generated by gii , fields get from DB table user
 * 
return [
        [['username', 'email', 'password'], 'filter','filter' =>'trim', 'skipOnEmpty' =>'true'], // ոչ պռոբել, ոչ դատարկ
        [['username', 'email', 'status'], 'required'], // պարտադիր
        [['status', 'created_at', 'updated_at'], 'integer'],
        ['email', 'email'],
        ['username', 'string', 'min' => 3 ,'max' => 200],
        [['password'], 'required', 'on' => 'create'], // պարտադիր լրացնել <ստեղծման> սցենարի ժամանակ
        [['username'], 'unique', 'message' => 'This name is reserved.' ],
        [['email'], 'unique', 'message' => 'This email address has already registered.'],
        [['email', 'password_hash'], 'string', 'max' => 255],
        [['auth_key'], 'string', 'max' => 32],
    ];
 * 
 */